// Retrieve color maps.
//
// @param {String} $key
//
@function color($key: 'primary') {
	@return map-get($colors, $key);
}
@function color-contrasted($key: 'primary') {
	$color-contrasted: map-get($colors-contrasted, $key);
	@if ( $color-contrasted != null ) {
		@return $color-contrasted;
	}
	@return map-get($colors, $key);
}
@function gray($key: '100') {
	@return map-get($grays, $key);
}
@function rgba-black($key: '100') {
	@return map-get($rgba-blacks, $key);
}
@function rgba-white($key: '100') {
	@return map-get($rgba-whites, $key);
}

// Request a theme color level
//
// @param {String} $key
//
@function color-level($color: 'primary', $level: 0) {
	@if type-of($color) != color {
		$color: color($color);
	}
	$base: if($level > 0, #000000, #FFFFFF);
	$level: abs($level);
	$weight: $level * 5%;
	@if ($weight > 100%) {
		$weight: 100%;
	}
	@return mix($base, $color, $weight);
}
@function color-contrasted-level($color: 'primary', $level: 0) {
	@if type-of($color) != color {
		$color: color-contrasted($color);
	}
	$base: if($level > 0, #000000, #FFFFFF);
	$level: abs($level);
	$weight: $level * 5%;
	@if ($weight > 100%) {
		$weight: 100%;
	}
	@return mix($base, $color, $weight);
}

// Color contrast.
//
// @param {Color} $color
//
@function color-yiq($color) {
	$r: red($color);
	$g: green($color);
	$b: blue($color);

	$yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

	@if ($yiq >= 150) {
		@return map-get($colors, 'text-primary');
	} @else {
		@return map-get($colors-contrasted, 'text-primary');
	}
}

// Use an SVG inline in CSS.
//
// @param {String} $svg
//  SVG image to encode
//
// @return {String}
//  Encoded SVG data uri
//
@function svg-uri($svg) {
	$encoded: '';
	$slice: 2000;
	$index: 0;
	$loops: ceil(str-length($svg) / $slice);
	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1);
		$chunk: str-replace($chunk, '\'', '"');
		$chunk: str-replace($chunk, '<', '%3C');
		$chunk: str-replace($chunk, '>', '%3E');
		$chunk: str-replace($chunk, '&', '%26');
		$chunk: str-replace($chunk, '#', '%23');
		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}
	@return url('data:image/svg+xml;charset=utf8,#{$encoded}');
}

// Replace $search with $replace in $string.
//
// @param {String} $string
//  Initial string
//
// @param {String} $search
//  Substring to replace
//
// @param {String} $replace
//  ('') - New value
//
// @return {String}
//  Updated string
//
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}

// Convert any CSS <length> or <percentage> value to any another.
//
// @param {Number} $length
//  A css <length> or <percentage> value
//
// @param {String} $to-unit
//  String matching a css unit keyword, e.g. 'em', '%', etc.
//
// @param {Number} $from-context
//  When converting from relative units, the absolute length (in px) to
//  which $length refers (e.g. for $length with em units, would normally
//  be the font-size of the current element).
//  16px is typically default font-size for all browsers.
//
// @param {Number} $to-context
//  For converting to relative units, the absolute length in px to which the
//  output value will refer. Defaults to the same as $from-context, since it
//  is rarely needed.
//
// @return {Number}
//  Converted CSS length
//
@function convert-length($length, $to-unit, $from-context: 16px, $to-context: $from-context) {

	$from-unit: unit($length);

	// Optimize for cases where `from` and `to` units are accidentally the same.
	@if $from-unit == $to-unit {
		@return $length;
	}

	// Context values must be in px so we can determine a conversion ratio for
	// relative units.
	@if unit($from-context) != 'px' {
		@warn 'Paremeter "$from-context #{$from-context}" must resolve to a value in pixel units.';
	}
	@if unit($to-context) != 'px' {
		@warn 'Parameter "$to-context #{$to-context}" must resolve to a value in pixel units.';
	}

	// Convert input length to pixels
	$px-length: $length;

	@if $from-unit != 'px' {
		// Convert relative units using the from-context parameter.
		@if $from-unit == 'em' {
			$px-length: $length * $from-context / 1em;
		} @else if $from-unit == 'rem' {
			$px-length: $length * $from-context / 1rem;
		} @else if $from-unit == '%' {
			$px-length: $length * $from-context / 100%;
		} @else if $from-unit == 'ex' {
			$px-length: $length * $from-context / 2ex;
		} @else if $from-unit == 'in' or $from-unit == 'mm' or $from-unit == 'cm' or $from-unit == 'pt' or $from-unit == 'pc' {
			// Convert absolute units using SASS conversion table.
			$px-length: 0px + $length;
		} @else if $from-unit == 'ch' or $from-unit == 'vw' or $from-unit == 'vh' or $from-unit == 'vmin' {
			// Certain units can't be converted.
			@warn '#{$from-unit} units can\'t be reliably converted. Returning original value.';
			@return $length;
		} @else {
			@warn '#{$from-unit} is an unknown length unit. Returning original value.';
			@return $length;
		}
	}

	// Convert length in pixels to the output unit
	$output-length: $px-length;

	@if $to-unit != 'px' {
		@if $to-unit == 'em' {
			$output-length: $px-length * 1em / $to-context;
		} @else if $to-unit == 'rem' {
			$output-length: $px-length * 1rem / $to-context;
		} @else if $to-unit == '%' {
			$output-length: $px-length * 100% / $to-context;
		} @else if $to-unit == 'ex' {
			$output-length: $px-length * 2ex / $to-context;
		} @else if $to-unit == 'in' {
			$output-length: 0in + $px-length;
		} @else if $to-unit == 'mm' {
			$output-length: 0mm + $px-length;
		} @else if $to-unit == 'cm' {
			$output-length: 0cm + $px-length;
		} @else if $to-unit == 'pt' {
			$output-length: 0pt + $px-length;
		} @else if $to-unit == 'pc' {
			$output-length: 0pc + $px-length;
		} @else if $to-unit == 'ch' or $to-unit == 'vw' or $to-unit == 'vh' or $to-unit == 'vmin' {
			// Non-convertible units
			@warn '#{$to-unit} units can\'t be reliably converted. Returning original value.';
			@return $length;
		} @else {
			@warn '#{$to-unit} is an unknown length unit. Returning original value.';
			@return $length;
		}
	}

	@return $output-length;
}

// Convert string to number if string is valid CSS <length>.
// Casts a string into a number
//
// @param {String|Number} $string
//   Value to be parsed
//
// @return {Number}
//
@function to-number($string) {

	// $string: if(type-of($string) == string, unquote($string), $string);

	@if type-of($string) == number {
		@return $string;
	} @else if type-of($string) == string {

		$result: 0;
		$digits: 0;
		$minus: str-slice($string, 1, 1) == '-';
		$numbers: (
			'0': 0,
			'1': 1,
			'2': 2,
			'3': 3,
			'4': 4,
			'5': 5,
			'6': 6,
			'7': 7,
			'8': 8,
			'9': 9
		);

		@for $i from if($minus, 2, 1) through str-length($string) {

			$character: str-slice($string, $i, $i);

			@if not (index(map-keys($numbers), $character) or $character == '.') {
				@return add-unit(if($minus, -$result, $result), str-slice($string, $i));
			}

			@if $character == '.' {
				$digits: 1;
			} @else if $digits == 0 {
				$result: $result * 10 + map-get($numbers, $character);
			} @else {
				$digits: $digits * 10;
				$result: $result + map-get($numbers, $character) / $digits;
			}
		}

		@return if($minus, -$result, $result);

	} @else {
		@warn 'Value for "$string: #{$string}" should be a number or a string.';
		@return $string;
	}
}

// Remove the unit of a CSS <length>.
//
// @param {Number} $length
//   Number to remove unit from
//
// @return {Number}
//   Unitless number
//
@function strip-unit($number) {
	@if type-of($number) == 'number' {
		@if unitless($number) == false {
			@return $number / ($number * 0 + 1);
		}
	} @else {
		@warn '"$number: #{$number}" is #{type-of($number)} value and must resolve to a number value.';
	}
	@return $number;
}

// Add $unit to $unitless-number.
//
// @param {Number} $unitless-number
//   Value to add unit to
//
// @param {String} $unit
//   String representation of the unit
//
// @return {Number}
//   $unitless-number expressed in $unit
//
@function add-unit($unitless-number, $unit) {
	$units: (
		'px': 1px,
		'cm': 1cm,
		'mm': 1mm,
		'%': 1%,
		'ch': 1ch,
		'pc': 1pc,
		'in': 1in,
		'em': 1em,
		'rem': 1rem,
		'pt': 1pt,
		'ex': 1ex,
		'vw': 1vw,
		'vh': 1vh,
		'vmin': 1vmin,
		'vmax': 1vmax
	);
	@if index(map-keys($units), $unit) {
		@return $unitless-number * map-get($units, $unit);
	}
	@warn 'Invalid unit "#{$unit}".';
}

// Returns font size based on modular type scale.
//
// @param {Number} $font-size
//  Step to use in calculation
//
// @param {String} $unit
//  Unit in which value should be return
//
// @param {Number} $from-context
//  When converting from relative units, the absolute length (in px) to
//  which $font-size refers (e.g. for $font-sizes in em units, would
//  normally be the font-size of the current element).
//
// @param {String|false} $round-function
//  Round function to use.
//
@function font-size($font-size: 0, $unit: rem, $from-context: 0, $round-function: false) {

	@if unit($font-size) != number and unitless($font-size) == false {
		@warn 'Paremeter "$font-size #{$font-size}" must resolve to a unitless number.';
	} @else {
		$font-size: pow($type-scale-ratio, $font-size) * $font-size-base;
	}

	@if unit($from-context) != number and unitless($from-context) == false {
		@warn 'Paremeter "$from-context #{$from-context}" must resolve to a unitless number.';
	} @else {
		$from-context: pow($type-scale-ratio, $from-context) * $font-size-base;
	}

	@if $round-function == round {
		// Round a number to the nearest whole number.
		$font-size: round($font-size);
		$from-context: round($from-context);
	} @else if $round-function == ceil {
		// Round a number up to the next whole number.
		$font-size: ceil($font-size);
		$from-context: ceil($from-context);
	} @else if $round-function == floor {
		// Round a number down to the previous whole number.
		$font-size: floor($font-size);
		$from-context: floor($from-context);
	}

	@return convert-length($font-size, $unit, $from-context);
}

// Returns baseline (vertical rhythm) values.
//
// @param {Number} $lines
//
// @param {String} $unit
//  Unit in which value should be return
//
// @param {Number} $from-context
//  When converting from relative units, the absolute length (in px) to
//  which $font-size refers (e.g. for $font-sizes in em units, would
//  normally be the font-size of the current element).
//
// @param {Boolean} $unitless-zero
//  Wheather return unitless zero values or zero with the default unit
//
@function baseline($lines: 1, $unit: rem, $from-context: 0, $unitless-zero: false) {

	$from-context: font-size($from-context, px);

	$return: ();

	@each $line in $lines {

		$to-join: $line;

		@if type-of($line) == number and unitless($line) {

			$value: $line * $line-height-base;
			$to-join: convert-length($value, $unit, $from-context);

		} @else if type-of($line) == string and str-index($line, ':') {

			$l: str-slice($line, 1, str-index($line, ':') - 1);
			$l: to-number($l);

			$o: str-slice($line, str-index($line, ':') + 1);
			$o: to-number($o);

			$value: 0;

			@if type-of($l) == number and unitless($l) {

				$value: $l * $line-height-base;
				$value: convert-length($value, $unit, $from-context);

			} @else {
				$value: convert-length($l, $unit, $from-context);
			}

			$offset: convert-length($o, $unit, $from-context);

			$to-join: $value + $offset;
		}

		@if $unitless-zero and number == type-of($to-join) and 0 == $to-join {
			$return: join($return, 0);
		} @else {
			$return: join($return, $to-join);
		}
	}

	// Return a calulated single value or list of values.
	@if length($return) == 1 {
		@return nth($return, 1);
	}

	@return $return;
}

// Math functions require for moudlar type scale.
//
@function pow($number, $exponent) {
	@if (round($exponent) != $exponent) {
		@return exp($exponent * ln($number));
	}
	$value: 1;
	@if $exponent > 0 {
		@for $i from 1 through $exponent {
			$value: $value * $number;
		}
	} @else if $exponent < 0 {
		@for $i from 1 through -$exponent {
			$value: $value / $number;
		}
	}
	@return $value;
}
@function factorial($value) {
	$result: 1;
	@if $value == 0 {
		@return $result;
	}
	@for $index from 1 through $value {
		$result: $result * $index;
	}
	@return $result;
}
@function summation($iteratee, $input, $initial: 0, $limit: 100) {
	$sum: 0;
	@for $index from $initial to $limit {
		$sum: $sum + call(get-function($iteratee), $input, $index);
	}
	@return $sum;
}
@function exp-maclaurin($x, $n) {
	@return (pow($x, $n) / factorial($n));
}
@function exp($value) {
	@return summation('exp-maclaurin', $value, 0, 100);
}
@function ln-maclaurin($x, $n) {
	@return (pow(-1, $n + 1) / $n) * (pow($x - 1, $n));
}
@function ln($value) {
	$ten-exp: 1;
	$ln-ten: 2.30258509;
	@while ($value > pow(10, $ten-exp)) {
		$ten-exp: $ten-exp + 1;
	}
	@return summation(ln-maclaurin, $value / pow(10, $ten-exp), 1, 100) + $ten-exp * $ln-ten;
}
